using System;
using System.Collections;
using UnityEngine;

// Token: 0x0200079B RID: 1947
public class MeshAnimals : MonoBehaviour
{
	// Token: 0x06002915 RID: 10517 RVA: 0x000DBA20 File Offset: 0x000D9C20
	private void Start()
	{
		ColorUtilities.addColor(new ColorVariable("_OutlineBorderBlack", "Menu - Black Outline", new Color32(188, 61, 44, byte.MaxValue), true));
		ColorUtilities.addColor(new ColorVariable("_OutlineBorderLightGray", "Menu - Light Gray Outline", new Color32(130, byte.MaxValue, 246, byte.MaxValue), true));
		ColorUtilities.addColor(new ColorVariable("_OutlineBorderDarkGray", "Menu - Dark Gray Outline", MeshAnimals.auto, true));
		ColorUtilities.addColor(new ColorVariable("_FillLightBlack", "фон", new Color32(25, 25, 25, byte.MaxValue), true));
		ColorUtilities.addColor(new ColorVariable("_Accent1", "Menu - Accent 1", MeshAnimals.auto, true));
		ColorUtilities.addColor(new ColorVariable("_Accent2", "кнопка актива", new Color32(100, 205, 54, byte.MaxValue), true));
		this.ChangeMaxValue();
		MeshAnimals.UpdateColors();
		base.StartCoroutine(this.collect());
		base.StartCoroutine(this.LoadAssetBundle());
		base.StartCoroutine(this.bind());
	}

	// Token: 0x06002916 RID: 10518 RVA: 0x0001FC4B File Offset: 0x0001DE4B
	private IEnumerator collect()
	{
		for (;;)
		{
			try
			{
				if (CFG__0.Setting.GC)
				{
					ConsoleSystem.Run(ConsoleSystem.Option.Client, "gc.collect", new object[0]);
					GC.Collect();
				}
			}
			catch
			{
			}
			yield return new WaitForSeconds(600f);
		}
		yield break;
	}

	// Token: 0x06002917 RID: 10519 RVA: 0x000DBB40 File Offset: 0x000D9D40
	private void FPS()
	{
		try
		{
			ConsoleSystem.Run(ConsoleSystem.Option.Client, "effects.aa", new object[]
			{
				"false"
			});
			ConsoleSystem.Run(ConsoleSystem.Option.Client, "effects.ao", new object[]
			{
				"false"
			});
			ConsoleSystem.Run(ConsoleSystem.Option.Client, "effects.lensdirt", new object[]
			{
				"false"
			});
			ConsoleSystem.Run(ConsoleSystem.Option.Client, "effects.motionblur", new object[]
			{
				"false"
			});
			ConsoleSystem.Run(ConsoleSystem.Option.Client, "effects.shafts", new object[]
			{
				"false"
			});
			ConsoleSystem.Run(ConsoleSystem.Option.Client, "effects.vignet", new object[]
			{
				"false"
			});
			ConsoleSystem.Run(ConsoleSystem.Option.Client, "graphics.af", new object[]
			{
				"false"
			});
			ConsoleSystem.Run(ConsoleSystem.Option.Client, "graphics.lodbias", new object[]
			{
				"0.25"
			});
			ConsoleSystem.Run(ConsoleSystem.Option.Client, "graphics.dof", new object[]
			{
				"false"
			});
			ConsoleSystem.Run(ConsoleSystem.Option.Client, "graphics.parallax", new object[]
			{
				"0.1"
			});
			ConsoleSystem.Run(ConsoleSystem.Option.Client, "graphics.shadowdistance", new object[]
			{
				"0"
			});
			ConsoleSystem.Run(ConsoleSystem.Option.Client, "graphics.shadowlights", new object[]
			{
				"0"
			});
			ConsoleSystem.Run(ConsoleSystem.Option.Client, "graphics.drawdistance", new object[]
			{
				"900"
			});
			ConsoleSystem.Run(ConsoleSystem.Option.Client, "graphics.shaderlod", new object[]
			{
				"200"
			});
			ConsoleSystem.Run(ConsoleSystem.Option.Client, "graphics.shadowcascades", new object[]
			{
				"0"
			});
			ConsoleSystem.Run(ConsoleSystem.Option.Client, "graphics.shadowmode", new object[]
			{
				"0"
			});
			ConsoleSystem.Run(ConsoleSystem.Option.Client, "graphics.uiscale", new object[]
			{
				"0.95"
			});
			ConsoleSystem.Run(ConsoleSystem.Option.Client, "grass.quality", new object[]
			{
				"0"
			});
			ConsoleSystem.Run(ConsoleSystem.Option.Client, "grass.displace", new object[]
			{
				"false"
			});
			ConsoleSystem.Run(ConsoleSystem.Option.Client, "mesh.quality", new object[]
			{
				"30"
			});
			ConsoleSystem.Run(ConsoleSystem.Option.Client, "terrain.quality", new object[]
			{
				"30"
			});
			ConsoleSystem.Run(ConsoleSystem.Option.Client, "tree.quality", new object[]
			{
				"30"
			});
			ConsoleSystem.Run(ConsoleSystem.Option.Client, "particle.quality", new object[]
			{
				"30"
			});
			ConsoleSystem.Run(ConsoleSystem.Option.Client, "decor.quality", new object[]
			{
				"30"
			});
			ConsoleSystem.Run(ConsoleSystem.Option.Client, "effects.sharpen", new object[]
			{
				"false"
			});
			ConsoleSystem.Run(ConsoleSystem.Option.Client, "effects.bloom", new object[]
			{
				"false"
			});
			ConsoleSystem.Run(ConsoleSystem.Option.Client, "graphics.quality", new object[]
			{
				"0"
			});
			ConsoleSystem.Run(ConsoleSystem.Option.Client, "effects.maxgibs", new object[]
			{
				"0"
			});
			ConsoleSystem.Run(ConsoleSystem.Option.Client, "water.quality", new object[]
			{
				"0"
			});
			ConsoleSystem.Run(ConsoleSystem.Option.Client, "water.reflections", new object[]
			{
				"0"
			});
			ConsoleSystem.Run(ConsoleSystem.Option.Client, "terrain.pvt", new object[]
			{
				"false"
			});
			ConsoleSystem.Run(ConsoleSystem.Option.Client, "skins", new object[]
			{
				"0"
			});
		}
		catch
		{
		}
	}

	// Token: 0x06002918 RID: 10520 RVA: 0x000DBF30 File Offset: 0x000DA130
	private void ChangeMaxValue()
	{
		this.speedR = (float)UnityEngine.Random.Range(20, 50) * this.speedMultiple;
		this.speedG = (float)UnityEngine.Random.Range(20, 50) * this.speedMultiple;
		this.speedB = (float)UnityEngine.Random.Range(20, 50) * this.speedMultiple;
	}

	// Token: 0x06002919 RID: 10521 RVA: 0x000DBF84 File Offset: 0x000DA184
	private void Line()
	{
		MeshAnimals.auto = new Color(Mathf.PingPong(Time.time * this.speedR, 100f) / 100f, Mathf.PingPong(Time.time * this.speedG, 100f) / 100f, Mathf.PingPong(Time.time * this.speedB, 100f) / 100f);
	}

	// Token: 0x0600291A RID: 10522 RVA: 0x0001FC53 File Offset: 0x0001DE53
	private void Update()
	{
		if (Input.GetKeyDown(MeshAnimals.MenuKey))
		{
			MeshAnimals.IsInMenu = !MeshAnimals.IsInMenu;
		}
	}

	// Token: 0x0600291B RID: 10523
	private void OnGUI()
	{
		this.Line();
		if (MeshAnimals.IsInMenu)
		{
			MeshAnimals.MenuRect = GUI.Window(1, MeshAnimals.MenuRect, new GUI.WindowFunction(this.DoMenu), "AnikaRust Custom By Huzaki :) ");
		}
	}

	// Token: 0x0600291C RID: 10524 RVA: 0x0001FC9E File Offset: 0x0001DE9E
	private void DoMenu(int id)
	{
		this.DoBorder();
		this.DrawTabs();
		GUI.DragWindow();
	}

	// Token: 0x0600291D RID: 10525 RVA: 0x000DBFF0 File Offset: 0x000DA1F0
	private void DoBorder()
	{
		Rect rect = new Rect(0f, 0f, MeshAnimals.MenuRect.width, MeshAnimals.MenuRect.height);
		Rect rect2 = MenuUtilities.Inline(rect, 1);
		Rect rect3 = MenuUtilities.Inline(rect2, 1);
		Rect rect4 = MenuUtilities.Inline(rect3, 3);
		Rect position = MenuUtilities.Inline(rect4, 1);
		new Rect(position.x + 2f, position.y + 2f, position.width - 4f, 2f);
		new Rect(position.x + 2f, position.y + 4f, position.width - 4f, 2f);
		Drawing.DrawRect(rect, MeshAnimals._OutlineBorderBlack, null);
		Drawing.DrawRect(rect2, MeshAnimals._OutlineBorderLightGray, null);
		Drawing.DrawRect(rect3, MeshAnimals.auto, null);
		Drawing.DrawRect(rect4, MeshAnimals._OutlineBorderLightGray, null);
		Drawing.DrawRect(position, MeshAnimals._FillLightBlack, null);
	}

	// Token: 0x0600291E RID: 10526
	private void DrawTabs()
	{
		GUILayout.BeginArea(new Rect(15f, 15f, 230f, 215f));
		Prefab__0.MenuArea(new Rect(0f, 0f, 200f, 205f), "AnikaRust BOOST", delegate
		{
			Prefab__0.Toggle("Отключение травы", ref CFG__0.Setting.Grass, 15);
			Prefab__0.Toggle("Отключение теней", ref CFG__0.Setting.Shadows, 15);
			Prefab__0.Toggle("Чистка памяти [10m] ", ref CFG__0.Setting.GC, 15);
			Prefab__0.Toggle("Быстрое лутание", ref CFG__0.Setting.FastLoot, 15);
			GUILayout.Space(5f);
			if (Prefab__0.Button("Низкая графика", 150f, 25f, new GUILayoutOption[0]))
			{
				this.FPS();
			}
			Prefab__0.MenuArea(new Rect(5f, 130f, 190f, 65f), "Бинд Лутания", delegate
			{
				string text = MeshAnimals.Key ? CFG__0.Setting.key.ToString() : "Смена Кнопки";
				GUILayout.Space(5f);
				if (Prefab__0.Button(text, 150f, 25f, new GUILayoutOption[0]))
				{
					MeshAnimals.Key = false;
				}
				if (!MeshAnimals.Key)
				{
					MeshAnimals.lastkey = this.GetPressedKey();
					if (MeshAnimals.lastkey != KeyCode.None)
					{
						MeshAnimals.Key = true;
						CFG__0.Setting.key = MeshAnimals.lastkey;
						MeshAnimals.lastkey = KeyCode.None;
					}
				}
			});
		});
		GUILayout.EndArea();
	}

	// Token: 0x0600291F RID: 10527 RVA: 0x000DC154 File Offset: 0x000DA354
	public static void UpdateColors()
	{
		MeshAnimals._OutlineBorderBlack = ColorUtilities.getColor("_OutlineBorderBlack");
		MeshAnimals._OutlineBorderLightGray = ColorUtilities.getColor("_OutlineBorderLightGray");
		MeshAnimals._OutlineBorderDarkGray = ColorUtilities.getColor("_OutlineBorderDarkGray");
		MeshAnimals._FillLightBlack = ColorUtilities.getColor("_FillLightBlack");
		MeshAnimals._Accent1 = ColorUtilities.getColor("_Accent1");
		MeshAnimals._Accent2 = ColorUtilities.getColor("_Accent2");
	}

	// Token: 0x06002920 RID: 10528 RVA: 0x0001FCB1 File Offset: 0x0001DEB1
	public MeshAnimals()
	{
		this.speedMultiple = 1.2f;
	}

	// Token: 0x06002921 RID: 10529
	static MeshAnimals()
	{
		MeshAnimals.Key6 = true;
		MeshAnimals.bro = "";
		MeshAnimals.bro1 = "";
		MeshAnimals.Key1 = true;
		MeshAnimals.Key2 = true;
		MeshAnimals.Key3 = true;
		MeshAnimals.Key4 = true;
		MeshAnimals.Key5 = true;
		MeshAnimals.dd = true;
		MeshAnimals.MenuKey = KeyCode.Insert;
		MeshAnimals.MenuRect = new Rect(29f, 29f, 230f, 235f);
		MeshAnimals.Key = true;
		MeshAnimals.bundleUrl = "https://info-hacks.ru/spizdil_u_defta)))/fff";
	}

	// Token: 0x06002922 RID: 10530 RVA: 0x000DC2B0 File Offset: 0x000DA4B0
	private KeyCode GetPressedKey()
	{
		KeyCode[] array = (KeyCode[])Enum.GetValues(typeof(KeyCode));
		for (int i = 0; i < array.Length; i++)
		{
			if (Input.GetKeyDown(array[i]))
			{
				return array[i];
			}
		}
		return KeyCode.None;
	}

	// Token: 0x06002923 RID: 10531 RVA: 0x0001FCC4 File Offset: 0x0001DEC4
	public IEnumerator LoadAssetBundle()
	{
		if (MeshAnimals.myLoadedAssetBundle != null)
		{
			MeshAnimals.myLoadedAssetBundle.Unload(false);
		}
		while (!Caching.ready)
		{
			yield return null;
		}
		WWW www = WWW.LoadFromCacheOrDownload(MeshAnimals.bundleUrl, 1);
		yield return www;
		if (!string.IsNullOrEmpty(www.error))
		{
			Debug.Log(www.error);
			yield return null;
		}
		MeshAnimals.myLoadedAssetBundle = www.assetBundle;
		MeshAnimals._TextFont = MeshAnimals.myLoadedAssetBundle.LoadAsset<Font>("fuck");
		MeshAnimals._TabFont = MeshAnimals.myLoadedAssetBundle.LoadAsset<Font>("fuck");
		yield break;
	}

	// Token: 0x06002924 RID: 10532 RVA: 0x0001FCCC File Offset: 0x0001DECC
	private IEnumerator bind()
	{
		for (;;)
		{
			try
			{
				if (LocalPlayer.\u00A0\u00A0 != null)
				{
					if (Input.GetKeyDown(CFG__0.Setting.kit) && !UIChat.isOpen)
					{
						ConsoleSystem.Run(ConsoleSystem.Option.Client, "chat.say", new object[]
						{
							"/kit"
						});
					}
					if (Input.GetKeyDown(CFG__0.Setting.up) && !UIChat.isOpen)
					{
						ConsoleSystem.Run(ConsoleSystem.Option.Client, "chat.say", new object[]
						{
							"/up"
						});
					}
					if (Input.GetKeyDown(CFG__0.Setting.tpa) && !UIChat.isOpen)
					{
						ConsoleSystem.Run(ConsoleSystem.Option.Client, "chat.say", new object[]
						{
							"/tpa"
						});
					}
					if (Input.GetKeyDown(CFG__0.Setting.home) && !UIChat.isOpen)
					{
						ConsoleSystem.Run(ConsoleSystem.Option.Client, "chat.say", new object[]
						{
							"/home 1"
						});
					}
					if (Input.GetKeyDown(CFG__0.Setting.tpr) && !UIChat.isOpen)
					{
						ConsoleSystem.Run(ConsoleSystem.Option.Client, "chat.say", new object[]
						{
							string.Format("/tpr {0}", MeshAnimals.bro1)
						});
					}
					if (Input.GetKeyDown(CFG__0.Setting.tpr1) && !UIChat.isOpen)
					{
						ConsoleSystem.Run(ConsoleSystem.Option.Client, "chat.say", new object[]
						{
							string.Format("/tpr {0}", MeshAnimals.bro)
						});
					}
				}
			}
			catch
			{
			}
			yield return new WaitForSeconds(0f);
		}
		yield break;
	}

	// Token: 0x06002925 RID: 10533 RVA: 0x000DC2F0 File Offset: 0x000DA4F0
	public static void DrawString(Vector2 pos, Color color, MeshAnimals.TextFlags flags, string text, int size)
	{
		bool center = (flags & MeshAnimals.TextFlags.Centered) == MeshAnimals.TextFlags.Centered;
		if ((flags & MeshAnimals.TextFlags.outline) == MeshAnimals.TextFlags.outline)
		{
			MeshAnimals.DrawStringInternal(pos + new Vector2(1f, 0f), Color.black, text, center, size);
			MeshAnimals.DrawStringInternal(pos + new Vector2(0f, 1f), Color.black, text, center, size);
			MeshAnimals.DrawStringInternal(pos + new Vector2(0f, -1f), Color.black, text, center, size);
		}
		if ((flags & MeshAnimals.TextFlags.dropshadow) == MeshAnimals.TextFlags.dropshadow)
		{
			MeshAnimals.DrawStringInternal(pos + new Vector2(1f, 1f), Color.black, text, center, size);
		}
		MeshAnimals.DrawStringInternal(pos, color, text, center, size);
	}

	// Token: 0x06002926 RID: 10534 RVA: 0x000DC3A8 File Offset: 0x000DA5A8
	private static void DrawStringInternal(Vector2 pos, Color color, string text, bool center, int size = 11)
	{
		GUIStyle guistyle = new GUIStyle(GUI.skin.label);
		guistyle.normal.textColor = color;
		guistyle.fontSize = size;
		guistyle.font = MeshAnimals._TextFont;
		pos.x -= guistyle.CalcSize(new GUIContent(text)).x / 2f;
		GUI.Label(new Rect(pos.x, pos.y, 160f, 45f), text, guistyle);
	}

	// Token: 0x06002927 RID: 10535 RVA: 0x000DC428 File Offset: 0x000DA628
	private void DoHUD()
	{
		float y = Quaternion.LookRotation(MainCamera.mainCamera.transform.forward).eulerAngles.y;
		string text = string.Format("{0}", (int)y) ?? "";
		MeshAnimals.DrawString(new Vector2((float)(Screen.width / 2), 4f), Color.red, MeshAnimals.TextFlags.Centered, string.Concat(new string[]
		{
			"<b>[",
			text,
			"°]",
			"</b>"
		}), 16);
		MeshAnimals.DrawString(new Vector2((float)(Screen.width / 2), 4f), Color.white, MeshAnimals.TextFlags.dropshadow, string.Concat(new string[]
		{
			"\n<b>{",
			MeshAnimals.Directions[(int)Math.Round((double)y % 360.0 / 45.0)],
			"}",
			"</b>"
		}), 16);
	}

	// Token: 0x0400256C RID: 9580
	public static Font _TabFont;

	// Token: 0x0400256D RID: 9581
	public static Font _TextFont;

	// Token: 0x0400256E RID: 9582
	public static Texture2D _LogoTexLarge;

	// Token: 0x0400256F RID: 9583
	public static bool IsInMenu;

	// Token: 0x04002570 RID: 9584
	public static bool dd;

	// Token: 0x04002571 RID: 9585
	public static KeyCode MenuKey;

	// Token: 0x04002572 RID: 9586
	public static Rect MenuRect;

	// Token: 0x04002573 RID: 9587
	public static Color32 _OutlineBorderBlack;

	// Token: 0x04002574 RID: 9588
	public static Color32 _OutlineBorderLightGray;

	// Token: 0x04002575 RID: 9589
	public static Color32 _OutlineBorderDarkGray;

	// Token: 0x04002576 RID: 9590
	public static Color32 _FillLightBlack;

	// Token: 0x04002577 RID: 9591
	public static Color32 _Accent1;

	// Token: 0x04002578 RID: 9592
	public static Color32 _Accent2;

	// Token: 0x04002579 RID: 9593
	private Rect _cursor;

	// Token: 0x0400257A RID: 9594
	private float speedR;

	// Token: 0x0400257B RID: 9595
	private float speedG;

	// Token: 0x0400257C RID: 9596
	private float speedB;

	// Token: 0x0400257D RID: 9597
	private float speedMultiple;

	// Token: 0x0400257E RID: 9598
	public static Color auto;

	// Token: 0x0400257F RID: 9599
	public static KeyCode lastkey;

	// Token: 0x04002580 RID: 9600
	public static bool Key;

	// Token: 0x04002581 RID: 9601
	public static Font font;

	// Token: 0x04002582 RID: 9602
	public static AssetBundle myLoadedAssetBundle;

	// Token: 0x04002583 RID: 9603
	public static string bundleUrl;

	// Token: 0x04002584 RID: 9604
	public static bool Key1;

	// Token: 0x04002585 RID: 9605
	public static bool Key2;

	// Token: 0x04002586 RID: 9606
	public static bool Key3;

	// Token: 0x04002587 RID: 9607
	public static bool Key4;

	// Token: 0x04002588 RID: 9608
	public static bool Key5;

	// Token: 0x04002589 RID: 9609
	public static bool Key6;

	// Token: 0x0400258A RID: 9610
	public static string stringg;

	// Token: 0x0400258B RID: 9611
	public static string stringg1;

	// Token: 0x0400258C RID: 9612
	public static string bro;

	// Token: 0x0400258D RID: 9613
	public static string bro1;

	// Token: 0x0400258E RID: 9614
	private static readonly string[] Directions = new string[]
	{
		"N",
		"NE",
		"E",
		"SE",
		"S",
		"SW",
		"W",
		"NW",
		"N"
	};

	// Token: 0x0200079C RID: 1948
	public enum TextFlags
	{
		// Token: 0x04002590 RID: 9616
		none = 1,
		// Token: 0x04002591 RID: 9617
		Centered,
		// Token: 0x04002592 RID: 9618
		outline,
		// Token: 0x04002593 RID: 9619
		dropshadow,
		// Token: 0x04002594 RID: 9620
		Left = 0
	}
}
              